plugins {
    id 'io.quarkus' version '3.0.0.Alpha3'
}

archivesBaseName = 'telegram-state-machine-quarkus-starter'
group = parent.group
version = parent.version

jar.enabled = true

repositories {
    mavenCentral()
    mavenLocal()
}

jar {
    from sourceSets.main.allJava
    from project(':core').sourceSets.main.allJava

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath
                .findAll { it.name.endsWith('telegram-state-machine.jar') }
                .collect { zipTree(it) }
    }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}

dependencies {
    implementation(project(":core"))
    implementation platform("io.quarkus.platform:quarkus-bom:3.0.0.Alpha3")

    api 'io.quarkus:quarkus-hibernate-orm-panache'
    api 'io.quarkus:quarkus-jdbc-postgresql'
    api 'io.quarkus:quarkus-arc'
    api 'io.quarkus:quarkus-hibernate-orm'
    api 'io.quarkus:quarkus-config-yaml'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testImplementation 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            groupId group
            artifactId archivesBaseName
            version System.getProperty("generatedVersion") ?: "master-SNAPSHOT"

            from components.java
            artifact sourceJar {
                from sourceSets.main.allJava
                from project(':core').sourceSets.main.allJava
                classifier "sources"
            }

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}